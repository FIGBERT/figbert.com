const projects = [
    {
        "title": "txtodo",
        "slug": "txtodo",
        "date": "20/05/2020",
        "preview": "<p class=\"text-sm\" style=\"color: #bababa;\"><a class=\"underline\" href=\"https://txtodo.app/\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>txtodo</strong></a> is a minimalist open-source todo list app inspired by Jeff Huang's <a class=\"underline\" href=\"https://jeffhuang.com/productivity_text_file/\" rel=\"noopener noreferrer\" target=\"_blank\"><em>One File to Rule Them All</em></a>. It lists your immediate, short-term tasks to help you get things done without overthinking it. With txtodo, you list all your tasks for the day in the morning, and throughout the day you check off tasks as you complete them. Then, at midnight, all tasks are discarded so you can start fresh tomorrow \u2013 you can also create up to three long-term tasks that \"float\" with you from day-to-day. Did I mention that it's completely open-source and built with SwiftUI?</p>\n",
        "html": "<p class=\"leading-loose mb-3\"><a class=\"underline\" href=\"https://txtodo.app/\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>txtodo</strong></a> is a minimalist open-source todo list app inspired by Jeff Huang's <a class=\"underline\" href=\"https://jeffhuang.com/productivity_text_file/\" rel=\"noopener noreferrer\" target=\"_blank\"><em>One File to Rule Them All</em></a>. It lists your immediate, short-term tasks to help you get things done without overthinking it. With txtodo, you list all your tasks for the day in the morning, and throughout the day you check off tasks as you complete them. Then, at midnight, all tasks are discarded so you can start fresh tomorrow \u2013 you can also create up to three long-term tasks that \"float\" with you from day-to-day. Did I mention that it's completely open-source and built with SwiftUI?</p>\n<div class=\"my-6 flex space-x-10\">\n<div class=\"w-40 h-12 rounded-lg border border-2 border-current border-solid flex items-center\">\n<a class=\"flex underline\" href=\"https://apps.apple.com/us/app/txtodo/id1504609185\" rel=\"noopener noreferrer\" target=\"_blank\">\n<img alt=\"apple logo\" class=\"w-5 mx-2\" src=\"/content/txtodo/apple.svg\"/>\n<span class=\"text-xs leading-snug\">download from the app store</span>\n</a>\n</div>\n<div class=\"w-40 h-12 rounded-lg border border-2 border-current border-solid flex items-center\">\n<a class=\"flex underline\" href=\"https://github.com/therealFIGBERT/txtodo\" rel=\"noopener noreferrer\" target=\"_blank\">\n<img alt=\"Github logo\" class=\"w-5 mx-2\" src=\"/content/txtodo/github.svg\"/>\n<span class=\"text-xs leading-snug\">view the code</span>\n</a>\n</div>\n</div>\n<h2 class=\"mb-3\" id=\"-mobile-app\"># Mobile App</h2>\n<h3 id=\"-story\">## Story</h3>\n<p class=\"leading-loose mb-3\">On 15 February 2020, I found myself staring at <a class=\"underline\" href=\"https://github.com/FIGBERT/txtodo/commit/1b3ef45d5b22cae7ce533286a6a966f600dab3b0\" rel=\"noopener noreferrer\" target=\"_blank\">a blank Xcode project</a>. Minutes earlier, I had deleted my account with <a class=\"underline\" href=\"https://trello.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Trello</a>. For those not familiar with Trello, it's a <a class=\"underline\" href=\"https://en.wikipedia.org/wiki/Kanban\" rel=\"noopener noreferrer\" target=\"_blank\">kanban-style</a> productivity tool made by <a class=\"underline\" href=\"https://www.atlassian.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Atlassian</a> to keep track of tasks in a project with multiple engineers. I, however, am a solo devloper. I already know what features need work, which graphics need a refresh, and what languages aren't yet supported \u2013 because I'm working actively on everything. Keeping track of every little move in a PMS for a solo project quickly turned Trello from productivity software to <a class=\"underline\" href=\"http://catb.org/jargon/html/C/crudware.html\" rel=\"noopener noreferrer\" target=\"_blank\">crudware</a> with fancy graphics. I wanted an app that could <a class=\"underline\" href=\"https://www.youtube.com/watch?v=arj7oStGLkU\" rel=\"noopener noreferrer\" target=\"_blank\">trick the instant gratification monkey</a> into getting something done. Something free from the <a class=\"underline\" href=\"http://www.catb.org/jargon/html/C/creeping-featurism.html\" rel=\"noopener noreferrer\" target=\"_blank\">creeping featurism</a> in todo apps. I decided to build a simple app to do just that.</p>\n<p class=\"leading-loose mb-3\">And so, I found myself staring at the aforementioned blank Xcode project. I decided to learn and use the new <a class=\"underline\" href=\"https://developer.apple.com/xcode/swiftui/\" rel=\"noopener noreferrer\" target=\"_blank\">SwiftUI</a> framework to make use of the latest features in iOS development. I began coding. <strong>txtodo</strong> is built from the ground up to fix the problems I've found with modern task managers \u2013 something straightforward and easy-to-use, that helps you get things done instead of getting bogged down making lists. I did this by creating a dead-simple UX with an important key feature: tasks you create disappear at midnight. This prevents the overwhelming buildup of tasks we delay, and trains you to be highly productive \u2013 dealing only with tasks you can get done <em>that day</em>.</p>\n<p class=\"leading-loose mb-3\">I've personally found this to be very useful, especially in the COVID-19 quarantine/shelter-in-place. Even when days melt together, txtodo has helped me maintain productivity: pushing me to finish schoolwork, code everyday, and keep developing new projects.</p>\n<h3 id=\"-code\">## Code</h3>\n<p class=\"leading-loose mb-3\">txtodo is programmed 100% in Swift, with no third-party dependencies. It's also written with the most recent frameworks, <a class=\"underline\" href=\"https://developer.apple.com/xcode/swiftui/\" rel=\"noopener noreferrer\" target=\"_blank\">SwiftUI</a> and <a class=\"underline\" href=\"https://developer.apple.com/documentation/combine\" rel=\"noopener noreferrer\" target=\"_blank\">Combine</a> (though as SwiftUI is still new, I did have to write some wrappers from UIKit). The tasks are stored using the two core data models below:</p>\n<p class=\"leading-loose mb-3\"><img alt=\"core data models\" src=\"/content/txtodo/core-data-structs.png\"/></p>\n<p class=\"leading-loose mb-3\">Once a task is initialized, it's stored in an <code>NSPersistentCloudKitContainer</code> until its deleted, and displayed on the homescreen by a <code>ForEach</code> loop iterating over a <code>FetchRequest</code>. (For more on Core Data and SwiftUI, I would point you to <a class=\"underline\" href=\"https://www.hackingwithswift.com/quick-start/swiftui/introduction-to-using-core-data-with-swiftui\" rel=\"noopener noreferrer\" target=\"_blank\">this excellent tutorial</a>.) This <code>ForEach</code> loop is the only place where we can control all the tasks in the list at once, and so it's here that we manage the tasks. Once we initialize each task's view, we add an <code>onAppear()</code> modifier to check if the task should be deleted. If we're modifying a <code>dailyTaskView</code>, we check if the task's <code>creationDate</code> is equal to the day's date \u2013 if the dates match the task is displayed, and if they don't the task is deleted from storage. If we're modifying a <code>floatingTaskView</code>, the process is a little more complicated. The task should only be deleted if it is completed and the completion is a day or more old. This process looks something like this:</p>\n<p class=\"leading-loose mb-3\"><img alt=\"task deletion modifiers\" src=\"/content/txtodo/manage-task-deletion.png\"/></p>\n<p class=\"leading-loose mb-3\">Another interesting thing about SwiftUI: the order of certain view modifiers affects the behavior of the view they're modifying. This is particularly apparent when dealing with different combination of tap gestures. In my case, I want my task views to have single-tap, double-tap, and long press interactions. To get these interactions to work together without conflicting, they have to be ordered like so:</p>\n<p class=\"leading-loose mb-3\"><img alt=\"order of tap modifiers\" src=\"/content/txtodo/tap-modifiers-order.png\"/></p>\n<p class=\"leading-loose mb-3\">I plan on writing more about that in a blog post about the quirks and bugs of SwiftUI.</p>\n<h2 class=\"mb-3\" id=\"-website\"># Website</h2>\n<p class=\"leading-loose mb-3\">The txtodo website (<a class=\"underline\" href=\"https://txtodo.app/\" rel=\"noopener noreferrer\" target=\"_blank\">txtodo.app</a>) is programmed with <a class=\"underline\" href=\"https://svelte.dev/\" rel=\"noopener noreferrer\" target=\"_blank\">Svelte</a> \u2013 not <a class=\"underline\" href=\"https://sapper.svelte.dev/\" rel=\"noopener noreferrer\" target=\"_blank\">Sapper</a>, it's a single static page and doesn't need all that extra overhead \u2013 and <a class=\"underline\" href=\"https://tailwindcss.com/\" rel=\"noopener noreferrer\" target=\"_blank\">TailwindCSS</a>. The combination of these two frameworks has become my all time favorite \u2013 together, they give the comforting feeling of programming in pure HTML+JS+CSS, with the ease and enhaced capability of the most modern competing frameworks. You can <a class=\"underline\" href=\"https://github.com/FIGBERT/txtodo.app\" rel=\"noopener noreferrer\" target=\"_blank\">view the code for the site here</a>.</p>\n",
        "position": 1
    }
];

projects.forEach(project => {
	project.html = project.html.replace(/^\t{3}/gm, "");
});

export default projects;